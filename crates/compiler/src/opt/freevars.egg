(ruleset freevars)

;; Free variables

(sort FreeVars (Set String))
(function fv (Expr) FreeVars :merge (set-intersect old new))
(rule ((= e (Value v)))
      ((set (fv e) (set-empty))) :ruleset freevars)
(rule ((= e (Unary s e1))
       (= (fv e1) fv1))
      ((set (fv e) fv1)) :ruleset freevars)
(rule ((= e (Binary s e1 e2))
       (= (fv e1) fv1)
       (= (fv e2) fv2))
      ((set (fv e) (set-union fv1 fv2))) :ruleset freevars)
(rule ((= e (Fun x e1))
       (= (fv e1) fv1))
      ((set (fv e) (set-remove fv1 x))) :ruleset freevars)
(rule ((= e (App e1 e2))
       (= (fv e1) fv1)
       (= (fv e2) fv2))
      ((set (fv e) (set-union fv1 fv2))) :ruleset freevars)
(rule ((= e (Var x)))
      ((set (fv e) (set-insert (set-empty) x))) :ruleset freevars)
(rule ((= e (If e1 e2 e3))
       (= (fv e1) fv1)
       (= (fv e2) fv2)
       (= (fv e3) fv3))
      ((set (fv e) (set-union fv1 (set-union fv2 fv3)))) :ruleset freevars)
